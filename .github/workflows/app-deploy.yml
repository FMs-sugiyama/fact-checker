name: Deploy Application

on:
  # push:
  #   branches: ['**']  # 統合版 deploy-integrated.yml に移行のため無効化
  workflow_dispatch:  # 緊急時の個別実行用
  # workflow_run:
  #   workflows: ["Docker Build & Deploy"]
  #   types: [completed]
  #   branches: ['**']  # 統合版では needs で制御

permissions:
  contents: read
  id-token: write

env:
  ENABLE_APP_DEPLOY: false
  ENABLE_PRODUCTION_DEPLOY: false
  
  REGION: asia-northeast1
  TF_CLOUD_ORGANIZATION: "fact-checker"  # Terraform Cloud組織名

jobs:
  validate:
    runs-on: ubuntu-latest
    # workflow_runトリガーの場合は前ワークフローの成功をチェック
    if: github.event_name != 'workflow_run' || (github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.name == 'Docker Build & Deploy')
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      branch_name: ${{ steps.env.outputs.branch_name }}
      app_name: ${{ steps.env.outputs.app_name }}
      workspace_name: ${{ steps.env.outputs.workspace_name }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set Environment Variables
        id: env
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "app_name=x-fact-checker-prod" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "app_name=x-fact-checker-staging" >> $GITHUB_OUTPUT
          fi
          echo "branch_name=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          echo "workspace_name=fact-checker-fs" >> $GITHUB_OUTPUT
          
          echo "=== Environment Detection ==="
          echo "Branch: ${{ github.ref_name }}"
          echo "Environment: $([ "${{ github.ref }}" = "refs/heads/main" ] && echo "production" || echo "staging")"
          echo "App Name: $([ "${{ github.ref }}" = "refs/heads/main" ] && echo "x-fact-checker-prod" || echo "x-fact-checker-staging")"
          echo "Workspace: fact-checker-fs"
      
      - name: Authenticate to Google Cloud (for prerequisite check)
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCLOUD_SERVICE_KEY }}
          project_id: ${{ secrets.PROJECT_ID }}
      
      - name: Setup Google Cloud SDK (for prerequisite check)
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Check Application Prerequisites
        env:
          APP_NAME: ${{ steps.env.outputs.app_name }}
        run: |
          echo "🔍 アプリケーションデプロイ前提条件チェック実行中..."
          
          # Artifact Registryリポジトリの存在確認
          if gcloud artifacts repositories describe fact-checker-repo \
               --location=${{ env.REGION }} \
               --project=${{ secrets.PROJECT_ID }} >/dev/null 2>&1; then
            echo "✅ Artifact Registry リポジトリ (fact-checker-repo) 確認済み"
          else
            echo "❌ Artifact Registry リポジトリが見つかりません"
            echo "→ infrastructure-base-deploy.yml を先に実行してください"
            exit 1
          fi
          
          # Docker imageの存在確認
          IMAGE_URL="${{ env.REGION }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/fact-checker-repo/${APP_NAME}:latest"
          if gcloud container images describe "$IMAGE_URL" >/dev/null 2>&1; then
            echo "✅ Docker image 確認済み: $IMAGE_URL"
          else
            echo "❌ Docker image が見つかりません: $IMAGE_URL"
            echo "📋 必要なアクション:"
            echo "1. docker-build-deploy.yml で ENABLE_DOCKER_BUILD=true を設定"
            echo "2. Docker Build ワークフローを実行"
            exit 1
          fi
          
          echo ""
          echo "🎉 すべての前提条件が満たされています"
          echo "アプリケーションデプロイを開始できます"
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      
      - name: Terraform Init
        working-directory: ./infrastructure
        env:
          TF_WORKSPACE: ${{ steps.env.outputs.workspace_name }}
        run: terraform init
      
      - name: Terraform Validate
        working-directory: ./infrastructure
        env:
          TF_WORKSPACE: ${{ steps.env.outputs.workspace_name }}
        run: |
          echo "🔍 アプリケーションTerraform構文チェック実行"
          terraform validate
          echo "✅ アプリケーションTerraform構文チェック成功"
      
      - name: Terraform Plan (Dry Run)
        working-directory: ./infrastructure
        env:
          TF_WORKSPACE: ${{ steps.env.outputs.workspace_name }}
          GOOGLE_CREDENTIALS: ${{ secrets.GCLOUD_SERVICE_KEY }}
          GOOGLE_PROJECT: ${{ secrets.PROJECT_ID }}
          TF_VAR_deploy_phase: "app"
        run: |
          echo "🔍 アプリケーションTerraform Plan実行"
          terraform plan -var="deploy_phase=app"
          echo "✅ アプリケーションTerraform Plan成功"
          
          echo "=== 安全弁状況 ==="
          echo "ENABLE_APP_DEPLOY: ${{ env.ENABLE_APP_DEPLOY }}"
          echo "ENABLE_PRODUCTION_DEPLOY: ${{ env.ENABLE_PRODUCTION_DEPLOY }}"

  terraform-apply:
    needs: validate
    runs-on: ubuntu-latest
    if: vars.ENABLE_APP_DEPLOY == 'true' && (github.ref != 'refs/heads/main' || vars.ENABLE_PRODUCTION_DEPLOY == 'true')
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCLOUD_SERVICE_KEY }}
          project_id: ${{ secrets.PROJECT_ID }}
      
      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      
      - name: Terraform Init (Terraform Cloud)
        working-directory: ./infrastructure
        env:
          TF_WORKSPACE: ${{ needs.validate.outputs.workspace_name }}
        run: |
          echo "🚀 アプリケーションTerraform初期化中..."
          terraform init
          echo "✅ アプリケーションTerraform初期化完了"
      
      - name: Terraform Plan (triggers Terraform Cloud)
        working-directory: ./infrastructure
        env:
          TF_WORKSPACE: ${{ needs.validate.outputs.workspace_name }}
          GOOGLE_CREDENTIALS: ${{ secrets.GCLOUD_SERVICE_KEY }}
          GOOGLE_PROJECT: ${{ secrets.PROJECT_ID }}
          TF_VAR_deploy_phase: "app"
        run: |
          echo "🚀 アプリケーションTerraform Plan実行でTerraform Cloudをトリガー"
          terraform plan -var="deploy_phase=app"
          echo "✅ アプリケーションPlan完了 - Terraform Cloud UIでApply確認・実行してください"
          echo ""
          echo "📋 次のステップ:"
          echo "1. Terraform Cloud UI: https://app.terraform.io/app/fact-checker/workspaces/fact-checker-fs"
          echo "2. 最新Runの詳細を確認"
          echo "3. Auto-apply無効の場合は手動でApplyボタンをクリック"
          echo ""
          echo "📦 作成されるリソース:"
          echo "- Cloud Run サービス (${{ needs.validate.outputs.app_name }})"
          echo "- Secret Manager シークレット"
          echo "- Cloud Scheduler ジョブ"
          echo "- IAM ロール・ポリシー"

  safety-report:
    needs: [validate]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Application Deploy Safety Status Report
        run: |
          echo "=== 🔒 アプリケーションデプロイ安全弁状況レポート ==="
          echo "ENABLE_APP_DEPLOY: ${{ vars.ENABLE_APP_DEPLOY }}"
          echo "ENABLE_PRODUCTION_DEPLOY: ${{ vars.ENABLE_PRODUCTION_DEPLOY }}"
          echo ""
          echo "=== 📋 実行結果 ==="
          echo "✅ Phase 3 (Validate): 常に実行"
          echo "$([ '${{ vars.ENABLE_APP_DEPLOY }}' = 'true' ] && echo '✅' || echo '❌') Phase 3 (App Deploy): ${{ vars.ENABLE_APP_DEPLOY }}"
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "$([ '${{ vars.ENABLE_PRODUCTION_DEPLOY }}' = 'true' ] && echo '✅' || echo '❌') Production Deploy: ${{ vars.ENABLE_PRODUCTION_DEPLOY }}"
          fi
          echo ""
          echo "=== 📖 次のステップ ==="
          if [ "${{ vars.ENABLE_APP_DEPLOY }}" != "true" ]; then
            echo "⚠️  前提条件確認:"
            echo "1. infrastructure-base-deploy.yml で基盤インフラが作成済みか確認"
            echo "2. docker-build-deploy.yml でDocker imageが作成済みか確認"
            echo "3. ENABLE_APP_DEPLOY=trueに設定してアプリケーションデプロイをテスト"
            echo "   → Cloud Run、Secrets、Schedulerが作成されます"
          elif [ "${{ github.ref }}" = "refs/heads/main" ] && [ "${{ vars.ENABLE_PRODUCTION_DEPLOY }}" != "true" ]; then
            echo "4. ENABLE_PRODUCTION_DEPLOY=trueに設定して本番デプロイを有効化"
          else
            echo "🎉 アプリケーションデプロイが適切に設定されています"
            echo "完全なCI/CDパイプラインが構築されました！"
          fi
          
          echo ""
          echo "=== 🔄 完全デプロイフロー ==="
          echo "Phase 1: infrastructure-base-deploy.yml (基盤インフラ)"
          echo "Phase 2: docker-build-deploy.yml (Docker Build)"  
          echo "Phase 3: app-deploy.yml (アプリケーション) ← 現在のワークフロー"
          echo ""
          echo "🚀 全フェーズ有効化で循環依存問題が解決されます！"